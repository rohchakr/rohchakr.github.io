{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/tech/java/java-commandline/","result":{"data":{"markdownRemark":{"html":"<p>This article provides an all-in-one reference to compile, pack and run java source files with external dependencies from the command line.</p>\n<h2 id=\"environment-details\" style=\"position:relative;\"><a href=\"#environment-details\" aria-label=\"environment details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Environment Details</h2>\n<ol>\n<li>Operating System: Oracle Linux 7.8</li>\n<li>Shell: bash</li>\n<li>Terminal Emulator: gnome-shell</li>\n<li>Text Editor: vim</li>\n<li>Java: jdk1.8.0_181-amd64</li>\n<li>External dependencies: jackson-core.jar, jackson-annotations.jar, jackson-databind.jar</li>\n</ol>\n<h2 id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h2>\n<pre><code class=\"language-shell\"># Create and navigate to a new empty directory\nmkdir java-cmdline\ncd java-cmdline\n\n# Create java source files\ntouch MyEnv.java Main.java\n</code></pre>\n<h2 id=\"source-code\" style=\"position:relative;\"><a href=\"#source-code\" aria-label=\"source code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Code</h2>\n<blockquote>\n<p>The file name and public class name must be the same</p>\n</blockquote>\n<pre><code class=\"language-java\">/**\n * A simple JavaBean for my env setup\n * @author\trohchakr\n */\npublic class MyEnv {\n\tprivate String textEditor;\n\tprivate String terminalEmulator;\n\n\tpublic String getTextEditor() {\n\t\treturn textEditor;\n\t}\n\n\tpublic String getTerminalEmulator() {\n\t\treturn terminalEmulator;\n\t}\n}\n</code></pre>\n<pre><code class=\"language-java\">import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.JsonProcessingException;\n\n/**\n * Main class\n * @author\trohchakr\n */\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t// For default-deserializer, json keys have to match with the class instance variables\n\t\tString myEnvJson = \"{\\\"textEditor\\\":\\\"vim\\\", \\\"terminalEmulator\\\":\\\"gnome-terminal\\\"}\";\n\n\t\ttry {\n\t\t\tMyEnv myEnv = objectMapper.readValue(myEnvJson, MyEnv.class);\n\t\t\tSystem.out.println(\"Text Editor: \" + myEnv.getTextEditor());\n\t\t\tSystem.out.println(\"Terminal Emulator: \" + myEnv.getTerminalEmulator());\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n</code></pre>\n<h2 id=\"compile\" style=\"position:relative;\"><a href=\"#compile\" aria-label=\"compile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile</h2>\n<pre><code class=\"language-shell\"># Create a new directory for class files\nmkdir classes\n\n# JDK installation directory\nJAVA_HOME=\"/usr/java/jdk1.8.0_181-amd64\"\n\n# 3rd party libraries directory containing the three jackson jar files\nJACKSON_DIR=\"/home/rohchakr/jackson\"\n\n# Compile MyEnv.java and generate MyEnv.class in classes directory\n$JAVA_HOME/bin/javac -d classes MyEnv.java\n\n# Compile Main.java with dependencies (jackson and MyEnv) and generate Main.class in classes directory\n$JAVA_HOME/bin/javac -cp $JACKSON_DIR/*:classes -d classes Main.java\n</code></pre>\n<h2 id=\"run-class-file\" style=\"position:relative;\"><a href=\"#run-class-file\" aria-label=\"run class file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run Class File</h2>\n<blockquote>\n<p>Skip this if we are going to generate JAR file and run that instead</p>\n</blockquote>\n<pre><code class=\"language-shell\"># Navigate to classes directory\ncd classes\n\n# Run the main class file\n$JAVA_HOME/bin/java -cp $JACKSON_DIR/*:. Main\n\n# Come out of the classes directory\ncd -\n</code></pre>\n<h2 id=\"pack-classes-in-jar-and-run-jar-file\" style=\"position:relative;\"><a href=\"#pack-classes-in-jar-and-run-jar-file\" aria-label=\"pack classes in jar and run jar file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pack Classes in JAR and Run JAR File</h2>\n<h3 id=\"approach-1-provide-classpath-and-main-class-while-running-jar\" style=\"position:relative;\"><a href=\"#approach-1-provide-classpath-and-main-class-while-running-jar\" aria-label=\"approach 1 provide classpath and main class while running jar permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach 1 (Provide Classpath and Main Class while Running JAR)</h3>\n<pre><code class=\"language-shell\"># Generate MyJar.jar in the current directory using all files from classes directory\n$JAVA_HOME/bin/jar cf MyJar.jar -C classes .\n\n# Clean up classes directory\nrm -rf classes\n\n# Run JAR file\n$JAVA_HOME/bin/java -cp $JACKSON_DIR/*:MyJar.jar Main\n</code></pre>\n<h3 id=\"approach-2-provide-classpath-and-main-class-using-custom-manifest-file\" style=\"position:relative;\"><a href=\"#approach-2-provide-classpath-and-main-class-using-custom-manifest-file\" aria-label=\"approach 2 provide classpath and main class using custom manifest file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Approach 2 (Provide Classpath and Main Class Using Custom Manifest File)</h3>\n<pre><code class=\"language-shell\"># Create a custom manifest file with main class and class path\nmkdir META-INF\necho 'Main-Class: Main' > META-INF/MANIFEST.MF\necho \"Class-Path: $JACKSON_DIR/jackson-core.jar $JACKSON_DIR/jackson-annotations.jar $JACKSON_DIR/jackson-databind.jar\" >> META-INF/MANIFEST.MF\n\n# Generate MyJar.jar in the current directory using custom manifest and all files from classes directory\n$JAVA_HOME/bin/jar cmf META-INF/MANIFEST.MF MyJar.jar -C classes .\n\n# Clean up classes and META-INF directory\nrm -rf classes META-INF\n\n# Run JAR file\n$JAVA_HOME/bin/java -jar MyJar.jar\n</code></pre>\n<h2 id=\"cleanup\" style=\"position:relative;\"><a href=\"#cleanup\" aria-label=\"cleanup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cleanup</h2>\n<pre><code class=\"language-bash\"># Remove the directory\ncd ..\nrm -rf java-cmdline\n</code></pre>","frontmatter":{"date":"December 23, 2020","title":"Run Java from CommandLine","description":null,"featuredImageAltText":"","featuredImage":null,"socialImage":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#environment-details\">Environment Details</a></p>\n</li>\n<li>\n<p><a href=\"#getting-started\">Getting Started</a></p>\n</li>\n<li>\n<p><a href=\"#source-code\">Source Code</a></p>\n</li>\n<li>\n<p><a href=\"#compile\">Compile</a></p>\n</li>\n<li>\n<p><a href=\"#run-class-file\">Run Class File</a></p>\n</li>\n<li>\n<p><a href=\"#pack-classes-in-jar-and-run-jar-file\">Pack Classes in JAR and Run JAR File</a></p>\n<ul>\n<li><a href=\"#approach-1-provide-classpath-and-main-class-while-running-jar\">Approach 1 (Provide Classpath and Main Class while Running JAR)</a></li>\n<li><a href=\"#approach-2-provide-classpath-and-main-class-using-custom-manifest-file\">Approach 2 (Provide Classpath and Main Class Using Custom Manifest File)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#cleanup\">Cleanup</a></p>\n</li>\n</ul>"}},"pageContext":{"slug":"/blog/tech/java/java-commandline/"}},"staticQueryHashes":["1865044719","3649515864"],"slicesMap":{}}