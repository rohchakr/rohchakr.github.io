{"version":3,"sources":["webpack:///./src/components/linkedin-badge.js","webpack:///./src/pages/portfolio.js"],"names":["LnBadgeComponent","status","src","useState","setStatus","useEffect","script","document","querySelector","getAttribute","createElement","async","setAttribute","body","appendChild","setAttributeFromEvent","event","type","addEventListener","setStateFromEvent","removeEventListener","useScript","console","log","class","data-version","data-size","data-locale","data-type","data-theme","data-vanity","href","PortfolioPage","navLocation","title"],"mappings":"wIA8FeA,MA3FU,WACrB,IAAMC,EAsBV,SAAmBC,GAAK,MAEQC,mBAASD,EAAM,UAAY,QAAhDD,EAFa,KAELG,EAFK,KAgEpB,OA5DAC,qBACE,WAGE,GAAKH,EAAL,CAOA,IAAII,EAASC,SAASC,cAAT,eAAsCN,EAAtC,MAEb,GAAKI,EAsBHF,EAAUE,EAAOG,aAAa,oBAtBnB,EAEXH,EAASC,SAASG,cAAc,WACzBR,IAAMA,EACbI,EAAOK,OAAQ,EACfL,EAAOM,aAAa,cAAe,WAEnCL,SAASM,KAAKC,YAAYR,GAI1B,IAAMS,EAAwB,SAACC,GAC7BV,EAAOM,aACL,cACe,SAAfI,EAAMC,KAAkB,QAAU,UAItCX,EAAOY,iBAAiB,OAAQH,GAChCT,EAAOY,iBAAiB,QAASH,GASnC,IAAMI,EAAoB,SAACH,GACzBZ,EAAyB,SAAfY,EAAMC,KAAkB,QAAU,UAQ9C,OAJAX,EAAOY,iBAAiB,OAAQC,GAChCb,EAAOY,iBAAiB,QAASC,GAG1B,WACDb,IACFA,EAAOc,oBAAoB,OAAQD,GACnCb,EAAOc,oBAAoB,QAASD,KAhDtCf,EAAU,UAoDd,CAACF,IAGID,EAtFQoB,CACX,sDAKJ,OAFAC,QAAQC,IAAI,kBAAmBtB,GAG3B,6BACI,yBAAKuB,MAAM,mBAAoBC,eAAa,KAAKC,YAAU,SAASC,cAAY,QAAQC,YAAU,WAAWC,aAAW,QAAQC,cAAY,YAAW,uBAAGN,MAAM,iBAAiBO,KAAK,yDAA/B,wB,YCCpJC,UAPO,kBACpB,kBAAC,IAAD,CAAQC,YAAY,aAClB,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,EAAD","file":"component---src-pages-portfolio-js-20b085c226f9c6bf0324.js","sourcesContent":["import React from \"react\"\nimport { useState, useEffect } from \"react\"\n\nconst LnBadgeComponent = () => {\n    const status = useScript(\n        'https://platform.linkedin.com/badges/js/profile.js'\n      );\n\n    console.log(\"Script Status: \", status);\n\n    return (\n        <div>\n            <div class=\"LI-profile-badge\"  data-version=\"v1\" data-size=\"medium\" data-locale=\"en_US\" data-type=\"vertical\" data-theme=\"light\" data-vanity=\"rohchakr\"><a class=\"LI-simple-link\" href='https://in.linkedin.com/in/rohchakr?trk=profile-badge'>Rohit Chakraborty</a></div>\n            {/* {status === \"ready\" && (\n                // <div>\n                // Script function call response: \n                // </div>\n                <div class=\"LI-profile-badge\"  data-version=\"v1\" data-size=\"medium\" data-locale=\"en_US\" data-type=\"vertical\" data-theme=\"light\" data-vanity=\"rohchakr\"><a class=\"LI-simple-link\" href='https://in.linkedin.com/in/rohchakr?trk=profile-badge'>Rohit Chakraborty</a></div>\n            )} */}\n            {/* The above part is not working */}\n        </div>\n    )\n}\n\n\n// Hook\nfunction useScript(src) {\n    // Keep track of script status (\"idle\", \"loading\", \"ready\", \"error\")\n    const [status, setStatus] = useState(src ? \"loading\" : \"idle\");\n  \n    useEffect(\n      () => {\n        // Allow falsy src value if waiting on other data needed for\n        // constructing the script URL passed to this hook.\n        if (!src) {\n          setStatus(\"idle\");\n          return;\n        }\n  \n        // Fetch existing script element by src\n        // It may have been added by another intance of this hook\n        let script = document.querySelector(`script[src=\"${src}\"]`);\n  \n        if (!script) {\n          // Create script\n          script = document.createElement(\"script\");\n          script.src = src;\n          script.async = true;\n          script.setAttribute(\"data-status\", \"loading\");\n          // Add script to document body\n          document.body.appendChild(script);\n  \n          // Store status in attribute on script\n          // This can be read by other instances of this hook\n          const setAttributeFromEvent = (event) => {\n            script.setAttribute(\n              \"data-status\",\n              event.type === \"load\" ? \"ready\" : \"error\"\n            );\n          };\n  \n          script.addEventListener(\"load\", setAttributeFromEvent);\n          script.addEventListener(\"error\", setAttributeFromEvent);\n        } else {\n          // Grab existing script status from attribute and set to state.\n          setStatus(script.getAttribute(\"data-status\"));\n        }\n  \n        // Script event handler to update status in state\n        // Note: Even if the script already exists we still need to add\n        // event handlers to update the state for *this* hook instance.\n        const setStateFromEvent = (event) => {\n          setStatus(event.type === \"load\" ? \"ready\" : \"error\");\n        };\n  \n        // Add event listeners\n        script.addEventListener(\"load\", setStateFromEvent);\n        script.addEventListener(\"error\", setStateFromEvent);\n  \n        // Remove event listeners on cleanup\n        return () => {\n          if (script) {\n            script.removeEventListener(\"load\", setStateFromEvent);\n            script.removeEventListener(\"error\", setStateFromEvent);\n          }\n        };\n      },\n      [src] // Only re-run effect if script src changes\n    );\n  \n    return status;\n  }\n\n\nexport default LnBadgeComponent","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport LnBadgeComponent from \"../components/linkedin-badge\"\nimport SEO from \"../components/seo\"\n\nconst PortfolioPage = () => (\n  <Layout navLocation=\"portfolio\">\n    <SEO title=\"Portfolio\" />\n    <LnBadgeComponent />\n  </Layout>\n)\n\nexport default PortfolioPage\n"],"sourceRoot":""}